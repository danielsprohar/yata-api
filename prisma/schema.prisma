generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [pgcrypto]
}

model User {
  id                 String    @id @default(dbgenerated("gen_random_uuid()")) @map("user_id") @db.Uuid
  email              String    @unique
  emailVerified      Boolean   @default(false) @map("email_verified")
  password           String
  name               String?
  phoneNumber        String?   @map("phone_number")
  phoneVerified      Boolean   @default(false) @map("phone_verified")
  picture            String?
  tenant             String?
  username           String?
  nickname           String?
  familyName         String?   @map("family_name")
  givenName          String?   @map("given_name")
  blocked            Boolean   @default(false)
  blockedFor         String?   @map("blocked_for")
  lastIp             String?   @map("last_ip")
  multifactor        String?
  multifactorUpdated DateTime? @map("multifactor_updated")
  lastLogin          DateTime? @map("last_login") @db.Timestamptz
  lastPasswordReset  DateTime? @map("last_password_reset") @db.Timestamptz
  loginsCount        Int       @default(1) @map("logins_count")

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamptz

  // relations
  projects Project[]
  tasks    Task[]
  tags     Tag[]

  @@map("users")
}

model Project {
  id        Int         @id @default(autoincrement())
  name      String      @db.VarChar(64)
  important Boolean     @default(false)
  view      ProjectView @default(LIST) @map("view")
  createdAt DateTime    @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime?   @updatedAt @map("updated_at") @db.Timestamptz
  // relations
  tasks     Task[]
  sections  Section[]
  User      User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String      @db.Uuid @map("user_id")

  @@map("project")
}

model Task {
  id          Int       @id @default(autoincrement())
  title       String    @db.VarChar(4096)
  description String?
  content     String?
  priority    Int?      @default(0)
  sort_order  Int       @default(0) @map("sort_order")
  isDeleted   Boolean   @default(false) @map("is_deleted")
  isCompleted Boolean   @default(false) @map("is_completed")
  isAllDay    Boolean   @default(true) @map("is_all_day")
  dueDate     DateTime? @map("due_date") @db.Timestamptz
  startDate   DateTime? @map("start_date") @db.Timestamptz

  // recurrence
  rruleSet String? @map("rrule_set") @db.VarChar(1024)
  rrule    String? @map("rrule") @db.VarChar(1024)

  // timestamps
  completedAt DateTime? @map("completed_at") @db.Timestamptz
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt   DateTime? @updatedAt @map("updated_at") @db.Timestamptz

  // relations
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId Int      @map("project_id")
  section   Section? @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  sectionId Int?     @map("section_id")
  tags      Tag[]
  User      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @db.Uuid @map("user_id")

  parentId Int?   @map("parent_id")
  task     Task?  @relation("subtasks", fields: [parentId], references: [id])
  subtasks Task[] @relation("subtasks")

  @@index([title])
  @@map("task")
}

model Section {
  id        Int     @id @default(autoincrement())
  name      String  @db.VarChar(64)
  order     Int     @default(0)
  // relations
  tasks     Task[]
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId Int     @map("project_id")

  @@map("section")
}

model Tag {
  id           Int     @id @default(autoincrement())
  name         String  @db.VarChar(32)
  colorHexCode String? @db.VarChar(8)
  // relations
  tasks        Task[]
  User         User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String  @db.Uuid @map("user_id")

  @@unique([name, userId])
  @@map("tag")
}

enum ProjectView {
  LIST
  KANBAN

  @@map("project_view")
}
