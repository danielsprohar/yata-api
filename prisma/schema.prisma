generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Project {
    id          Int        @id @default(autoincrement()) @map("project_id")
    name        String     @map("project_name") @db.VarChar(128)
    ownerId     String?    @map("owner_id")
    isImportant Boolean    @default(false) @map("is_important")
    view        View       @default(LIST) @map("project_view")
    createdAt   DateTime   @default(now()) @map("created_at") @db.Timestamptz
    updatedAt   DateTime?  @updatedAt @map("updated_at") @db.Timestamptz
    // relations
    tasks       Task[]
    sections    Section[]
    activities  Activity[]

    @@map("project")
}

model Task {
    id           Int            @id @default(autoincrement()) @map("task_id")
    title        String         @db.VarChar(1024)
    content      String?        @db.VarChar(8192)
    priority     Int            @default(0)
    completed    Boolean        @default(false)
    deleted      Boolean        @default(false)
    isAllDay     Boolean        @default(true) @map("is_all_day")
    dueDate      DateTime?      @map("due_date")
    startedOn    DateTime?      @default(now()) @map("started_on") @db.Timestamptz
    completedOn  DateTime?      @map("completed_on") @db.Timestamptz
    createdAt    DateTime       @default(now()) @map("created_at") @db.Timestamptz
    updatedAt    DateTime?      @updatedAt @map("updated_at") @db.Timestamptz
    // relations
    Project      Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
    projectId    Int            @map("project_id")
    section      Section?       @relation(fields: [sectionId], references: [id])
    sectionId    Int?           @map("section_id")
    labeledTasks LabeledTasks[]
    activity     Activity?
    // subtasks
    subtasks     Task[]         @relation("subtasks")
    task         Task?          @relation("subtasks", fields: [parentId], references: [id])
    parentId     Int?           @map("parent_id")

    @@index([content])
    @@map("task")
}

model Activity {
    id        Int      @id @default(autoincrement()) @map("activity_id")
    message   String   @db.VarChar(1024)
    createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz
    // one-to-one -> Task:Activity
    taskId    Int      @unique @map("task_id")
    task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)

    projectId Int     @map("project_id")
    project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

    @@map("activity")
}

model Section {
    id        Int     @id @default(autoincrement()) @map("section_id")
    name      String  @map("section_name") @db.VarChar(64)
    // relations
    tasks     Task[]
    project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
    projectId Int     @map("project_id")

    @@map("section")
}

model Label {
    id           Int            @id @default(autoincrement()) @map("label_id")
    name         String         @map("label_name") @db.VarChar(32)
    // relations
    labeledTasks LabeledTasks[]

    @@map("label")
}

model LabeledTasks {
    labelId Int   @map("label_id")
    label   Label @relation(fields: [labelId], references: [id], onDelete: Cascade)
    taskId  Int   @map("task_id")
    task    Task  @relation(fields: [taskId], references: [id], onDelete: Cascade)

    @@id([taskId, labelId])
    @@map("labeled_task")
}

enum View {
    LIST
    KANBAN

    @@map("view")
}
