generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Project {
    id          Int               @id @default(autoincrement())
    name        String            @db.VarChar(64)
    ownerId     String?           @map("owner_id")
    important   Boolean           @default(false)
    projectView ProjectView       @default(LIST) @map("project_view")
    createdAt   DateTime          @default(now()) @map("created_at") @db.Timestamptz
    updatedAt   DateTime?         @updatedAt @map("updated_at") @db.Timestamptz
    // relations
    tasks       Task[]
    sections    Section[]
    activities  ProjectActivity[]

    @@map("project")
}

model Task {
    id          Int            @id @default(autoincrement())
    title       String         @db.VarChar(1024)
    content     String?        @db.VarChar(8192)
    priority    Int            @default(0)
    completed   Boolean        @default(false)
    deleted     Boolean        @default(false)
    allDay      Boolean        @default(true) @map("all_day")
    dueDate     DateTime?      @map("due_date") @db.Timestamptz
    completedOn DateTime?      @map("completed_on") @db.Timestamptz
    createdAt   DateTime       @default(now()) @map("created_at") @db.Timestamptz
    updatedAt   DateTime?      @updatedAt @map("updated_at") @db.Timestamptz
    // relations
    project     Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
    projectId   Int            @map("project_id")
    section     Section?       @relation(fields: [sectionId], references: [id])
    sectionId   Int?           @map("section_id")
    tags        Tag[]
    activities  TaskActivity[]
    subtasks    Subtask[]

    @@index([content])
    @@map("task")
}

model Subtask {
    id          Int       @id @default(autoincrement())
    title       String    @db.VarChar(1024)
    priority    Int       @default(0)
    completed   Boolean   @default(false)
    deleted     Boolean   @default(false)
    completedOn DateTime? @map("completed_on") @db.Timestamptz
    createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz
    updatedAt   DateTime? @updatedAt @map("updated_at") @db.Timestamptz
    // relations
    task        Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)
    taskId      Int       @map("task_id")

    @@map("subtask")
}

model ProjectActivity {
    id        Int      @id @default(autoincrement())
    message   String   @db.VarChar(256)
    createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz
    projectId Int      @map("project_id")
    project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

    @@map("project_activity")
}

model TaskActivity {
    id        Int      @id @default(autoincrement())
    message   String   @db.VarChar(256)
    createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz
    Task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
    taskId    Int      @map("task_id")

    @@map("tag_activity")
}

model Section {
    id        Int     @id @default(autoincrement())
    name      String  @db.VarChar(64)
    // relations
    tasks     Task[]
    project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
    projectId Int     @map("project_id")

    @@map("section")
}

model Tag {
    id    Int    @id @default(autoincrement())
    name  String @db.VarChar(32)
    // relations
    tasks Task[]

    @@map("tag")
}

enum ProjectView {
    LIST
    KANBAN

    @@map("project_view")
}
