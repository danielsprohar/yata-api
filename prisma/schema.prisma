// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Calendar {
  id          Bytes           @id @default(dbgenerated("(uuid_to_bin(uuid()))")) @db.Binary(36)
  name        String          @db.VarChar(32)
  description String?         @db.Text
  public      Boolean         @default(false)
  ownerId     String?         @map("owner_id")
  createdAt   DateTime        @default(now()) @map("created_at")
  updatedAt   DateTime        @updatedAt @map("updated_at")
  events      CalendarEvent[]

  @@index([name])
}

model CalendarEvent {
  id          Bytes    @id @default(dbgenerated("(uuid_to_bin(uuid()))")) @db.Binary(36)
  name        String   @db.VarChar(255)
  description String?  @db.Text
  start       DateTime @map("start_date")
  end         DateTime @map("end_date")
  allDay      Boolean  @default(true) @map("all_day")
  rrule       String?  @db.Text
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  calendarId Bytes    @map("calendar_id") @db.Binary(36)
  calendar   Calendar @relation(fields: [calendarId], references: [id], onDelete: Cascade)

  @@index([name])
}

model Workspace {
  id          Bytes    @id @default(dbgenerated("(uuid_to_bin(uuid()))")) @db.Binary(36)
  name        String   @db.VarChar(32)
  description String?  @db.Text
  public      Boolean  @default(false)
  ownerId     String?  @map("owner_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  projects Project[]
  tasks    Task[]
  boards   Board[]

  @@index([name])
}

model Project {
  id          Bytes         @id @default(dbgenerated("(uuid_to_bin(uuid()))")) @db.Binary(36)
  name        String        @db.VarChar(32)
  description String?       @db.Text
  status      ProjectStatus @default(NOT_STARTED)
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")

  workspaceId Bytes     @map("workspace_id") @db.Binary(36)
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  tasks Task[]

  @@index([name])
}

model Board {
  id          Bytes    @id @default(dbgenerated("(uuid_to_bin(uuid()))")) @db.Binary(36)
  name        String   @db.VarChar(32)
  description String?  @db.Text
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId Bytes     @map("workspace_id") @db.Binary(36)

  columns Column[]

  @@index([name])
}

model Column {
  id          Bytes    @id @default(dbgenerated("(uuid_to_bin(uuid()))")) @db.Binary(36)
  name        String   @db.VarChar(32)
  description String?  @db.Text
  position    Int      @default(0)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  Board   Board @relation(fields: [boardId], references: [id], onDelete: Cascade)
  boardId Bytes @map("board_id") @db.Binary(36)

  tasks Task[]

  @@index([name])
}

model Task {
  id          Bytes      @id @default(dbgenerated("(uuid_to_bin(uuid()))")) @db.Binary(36)
  name        String     @db.VarChar(255)
  description String?    @db.Text
  status      TaskStatus @default(NOT_STARTED)
  dueDate     DateTime?  @map("due_date")
  priority    Priority   @default(MEDIUM)
  allDay      Boolean    @default(true) @map("all_day")
  startedAt   DateTime?  @map("started_at")
  completedAt DateTime?  @map("completed_at")
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")
  rrule       String?    @db.Text

  // relationships
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId Bytes     @map("workspace_id") @db.Binary(36)

  Project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId Bytes?   @map("project_id") @db.Binary(36)

  Column   Column? @relation(fields: [columnId], references: [id], onDelete: SetNull)
  columnId Bytes?  @map("column_id") @db.Binary(36)

  parent   Task?  @relation("SubTasks", fields: [parentId], references: [id], onDelete: Cascade)
  parentId Bytes? @map("parent_id") @db.Binary(36)

  subtasks Task[] @relation("SubTasks")

  @@index([name])
}

// Enums

enum ProjectStatus {
  NOT_STARTED
  IN_PROGRESS
  CANCELLED
  COMPLETED
}

enum TaskStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

enum Priority {
  NONE
  LOW
  MEDIUM
  HIGH
}
