// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Workspace {
  id          Bytes     @id @default(dbgenerated("(uuid_to_bin(uuid()))")) @db.Binary(36)
  name        String    @db.VarChar(255)
  description String?   @db.Text
  public      Boolean   @default(false)
  ownerId     String?   @map("owner_id")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  projects    Project[]

  @@map("Workspaces")
}

model Project {
  id          Bytes         @id @default(dbgenerated("(uuid_to_bin(uuid()))")) @db.Binary(36)
  workspaceId Bytes         @map("workspace_id") @db.Binary(36)
  name        String        @db.VarChar(255)
  description String?       @db.Text
  status      ProjectStatus @default(NOT_STARTED)
  view        ProjectView   @default(LIST)
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  workspace   Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  tasks       Task[]

  @@index([workspaceId])
  @@map("Projects")
}

model Task {
  id           Bytes      @id @default(dbgenerated("(uuid_to_bin(uuid()))")) @db.Binary(36)
  projectId    Bytes      @map("project_id") @db.Binary(36)
  parentTaskId Bytes?     @map("parent_task_id") @db.Binary(36)
  name         String     @db.VarChar(255)
  description  String?    @db.Text
  status       TaskStatus @default(NOT_STARTED)
  dueDate      DateTime?  @map("due_date")
  priority     Priority   @default(MEDIUM)
  completedAt  DateTime?  @map("completed_at")
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")
  project      Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  parentTask   Task?      @relation("SubTasks", fields: [parentTaskId], references: [id], onDelete: Cascade)
  subTasks     Task[]     @relation("SubTasks")

  @@index([projectId])
  @@index([parentTaskId])
  @@map("Tasks")
}

enum ProjectStatus {
  NOT_STARTED
  IN_PROGRESS
  CANCELLED
  COMPLETED
}

enum TaskStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

enum Priority {
  NONE
  LOW
  MEDIUM
  HIGH
}

enum ProjectView {
  BOARD
  LIST
  TABLE
}
