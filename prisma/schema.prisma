// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Workspace {
  id          Bytes     @id @default(dbgenerated("(uuid_to_bin(uuid()))")) @db.Binary(36)
  name        String    @db.VarChar(255)
  description String?   @db.Text
  public      Boolean   @default(false)
  ownerId     String?   @map("owner_id")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  projects    Project[]
  Task        Task[]

  @@map("Workspaces")
}

model Project {
  id           Bytes          @id @default(dbgenerated("(uuid_to_bin(uuid()))")) @db.Binary(36)
  workspaceId  Bytes          @map("workspace_id") @db.Binary(36)
  name         String         @db.VarChar(255)
  description  String?        @db.Text
  status       ProjectStatus  @default(NOT_STARTED)
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")
  workspace    Workspace      @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  tasks        Task[]
  KanbanColumn KanbanColumn[]

  @@index([workspaceId])
  @@map("Projects")
}

model KanbanColumn {
  id          Bytes    @id @default(dbgenerated("(uuid_to_bin(uuid()))")) @db.Binary(36)
  projectId   Bytes    @map("project_id") @db.Binary(36)
  name        String   @db.VarChar(128)
  description String?  @db.Text
  position    Int      @default(0)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tasks       Task[]

  @@index([projectId])
  @@map("KanbanColumns")
}

model Task {
  id             Bytes         @id @default(dbgenerated("(uuid_to_bin(uuid()))")) @db.Binary(36)
  workspaceId    Bytes         @map("workspace_id") @db.Binary(36)
  projectId      Bytes         @map("project_id") @db.Binary(36)
  parentId       Bytes?        @map("parent_id") @db.Binary(36)
  name           String        @db.VarChar(255)
  description    String?       @db.Text
  status         TaskStatus    @default(NOT_STARTED)
  dueDate        DateTime?     @map("due_date")
  priority       Priority      @default(MEDIUM)
  allDay         Boolean       @default(true) @map("all_day")
  completedAt    DateTime?     @map("completed_at")
  createdAt      DateTime      @default(now()) @map("created_at")
  updatedAt      DateTime      @updatedAt @map("updated_at")
  workspace      Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  project        Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  parentTask     Task?         @relation("SubTasks", fields: [parentId], references: [id], onDelete: Cascade)
  subTasks       Task[]        @relation("SubTasks")
  KanbanColumn   KanbanColumn? @relation(fields: [kanbanColumnId], references: [id])
  kanbanColumnId Bytes?        @db.Binary(36)

  @@index([projectId])
  @@index([parentId])
  @@index([workspaceId])
  @@index([name])
  @@map("Tasks")
}

enum ProjectStatus {
  NOT_STARTED
  IN_PROGRESS
  CANCELLED
  COMPLETED
}

enum TaskStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

enum Priority {
  NONE
  LOW
  MEDIUM
  HIGH
}
