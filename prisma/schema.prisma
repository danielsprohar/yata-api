// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  // shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Calendar {
  id          Bytes           @id @db.Binary(16)
  name        String          @db.VarChar(32)
  description String?         @db.Text
  public      Boolean         @default(false)
  ownerId     Bytes           @db.Binary(16)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  version     Int             @default(1)
  events      CalendarEvent[]

  @@index([name])
}

model CalendarEvent {
  id          Bytes    @id @db.Binary(16)
  name        String   @db.VarChar(255)
  description String?  @db.Text
  startDate   DateTime
  endDate     DateTime
  allDay      Boolean  @default(true)
  rrule       String?  @db.Text
  ownerId     Bytes    @db.Binary(16)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  version     Int      @default(1)

  calendarId Bytes    @db.Binary(16)
  calendar   Calendar @relation(fields: [calendarId], references: [id], onDelete: Cascade)

  @@index([name])
}

model Workspace {
  id          Bytes    @id @db.Binary(16)
  name        String   @db.VarChar(32)
  description String?  @db.Text
  public      Boolean  @default(false)
  ownerId     Bytes    @db.Binary(16)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  version     Int      @default(1)

  projects Project[]
  tasks    Task[]

  @@index([name])
}

model Project {
  id          Bytes    @id @db.Binary(16)
  name        String   @db.VarChar(32)
  description String?  @db.Text
  ownerId     Bytes    @db.Binary(16)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  version     Int      @default(1)

  workspaceId Bytes     @db.Binary(16)
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  tasks   Task[]
  Section Section[]

  @@index([name])
}

model Section {
  id        Bytes    @id @db.Binary(16)
  name      String   @db.VarChar(32)
  position  Int      @default(0)
  ownerId   Bytes    @db.Binary(16)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  version   Int      @default(1)

  Project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId Bytes   @db.Binary(16)

  tasks Task[]

  @@unique([projectId, position])
}

model Task {
  id          Bytes      @id @db.Binary(16)
  title       String     @db.VarChar(255)
  description String?    @db.Text
  status      TaskStatus @default(NOT_STARTED)
  dueDate     DateTime?
  priority    Priority   @default(NONE)
  allDay      Boolean    @default(true)
  startedAt   DateTime?
  completed   Boolean    @default(false)
  completedAt DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  rrule       String?    @db.Text
  version     Int        @default(1)

  // relationships
  ownerId     Bytes     @db.Binary(16)
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId Bytes     @db.Binary(16)

  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId Bytes   @db.Binary(16)

  parent   Task?  @relation("SubTasks", fields: [parentId], references: [id], onDelete: Cascade)
  parentId Bytes? @db.Binary(16)

  section   Section? @relation(fields: [sectionId], references: [id])
  sectionId Bytes?   @db.Binary(16)

  subtasks Task[] @relation("SubTasks")
  tags     Tag[]

  @@index([title])
}

model Tag {
  id        Bytes    @id @db.Binary(16)
  name      String   @db.VarChar(16)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  version   Int      @default(1)
  ownerId   Bytes    @db.Binary(16)
  tasks     Task[]

  @@index([name])
  @@index([ownerId])
}

enum TaskStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

enum Priority {
  NONE
  LOW
  MEDIUM
  HIGH
}
