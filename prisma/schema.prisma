generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  pwd       String
  username  String?
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamptz

  // relations
  projects Project[]
  tasks    Task[]
  tags     Tag[]

  @@map("user")
}

model Project {
  id        Int         @id @default(autoincrement())
  name      String      @db.VarChar(64)
  important Boolean     @default(false)
  view      ProjectView @default(LIST) @map("view")
  createdAt DateTime    @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime?   @updatedAt @map("updated_at") @db.Timestamptz
  // relations
  tasks     Task[]
  sections  Section[]
  User      User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int         @map("user_id")

  @@map("project")
}

model Task {
  id          Int       @id @default(autoincrement())
  title       String    @db.VarChar(4096)
  description String?
  content     String?
  priority    Int?      @default(0)
  isCompleted Boolean   @default(false) @map("is_completed")
  isAllDay    Boolean   @default(true) @map("is_all_day")
  sortOrder   Int       @default(0) @map("sort_order")
  dueDate     DateTime? @map("due_date") @db.Timestamptz
  startDate   DateTime? @map("start_date") @db.Timestamptz

  // recurrence
  rruleSet String? @map("rrule_set") @db.VarChar(1024)
  rrule    String? @map("rrule") @db.VarChar(1024)

  // timestamps
  completedAt DateTime? @map("completed_at") @db.Timestamptz
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt   DateTime? @updatedAt @map("updated_at") @db.Timestamptz

  // relations
  project   Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId Int       @map("project_id")
  section   Section?  @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  sectionId Int?      @map("section_id")
  tags      Tag[]
  subtasks  Subtask[]
  User      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int       @map("user_id")

  @@index([title])
  @@map("task")
}

model Subtask {
  id          Int       @id @default(autoincrement())
  title       String    @db.VarChar(1024)
  priority    Int       @default(0)
  completed   Boolean   @default(false)
  deleted     Boolean   @default(false)
  allDay      Boolean   @default(true) @map("all_day")
  dueDate     DateTime? @map("due_date") @db.Timestamptz
  completedOn DateTime? @map("completed_on") @db.Timestamptz
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt   DateTime? @updatedAt @map("updated_at") @db.Timestamptz
  // relations
  task        Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId      Int       @map("task_id")

  @@map("subtask")
}

model Section {
  id        Int     @id @default(autoincrement())
  name      String  @db.VarChar(64)
  // relations
  tasks     Task[]
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId Int     @map("project_id")

  @@map("section")
}

model Tag {
  id           Int     @id @default(autoincrement())
  name         String  @db.VarChar(32)
  colorHexCode String? @db.VarChar(8)
  // relations
  tasks        Task[]
  User         User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int     @map("user_id")

  @@unique([name, userId])
  @@map("tag")
}

enum ProjectView {
  LIST
  KANBAN

  @@map("project_view")
}
